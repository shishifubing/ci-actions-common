name: "terraform"

on:
  workflow_call:
    inputs:
      backend_config:
        default: main.s3.tfbackend
        type: string
        description: -backend-config for terraform
      working_directory:
        default: ./
        type: string
        description: working directory for all steps
    secrets:
      env:
        description: environment variables (they will be masked)
        required: false
      mask:
        description: values that will be masked
        required: false

jobs:
  terraform:
    name: terraform
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.3.7
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: mask values
        run: for value in "${{ secrets.masked }}"; do echo "::add-mask::${value}"; done

      - name: setup env
        run: echo "${{ secrets.env }}" >>"${GITHUB_ENV}"

      - name: checkout
        uses: actions/checkout@v3

      - name: format
        id: fmt
        run: terraform fmt -check

      - name: init
        id: init
        run: terraform init -reconfigure -backend-config="${{ inputs.backend_config }}"

      - name: validate
        id: validate
        run: terraform validate -no-color

      - name: plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          output=$(terraform plan -no-color -input=false)
          echo -e "stdout<<EOF\n${output}\nEOF\n" >>"${GITHUB_OUTPUT}"
        continue-on-error: true

      - name: pr comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
              #### Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization: \`${{ steps.init.outcome }}\`
              #### Terraform Validation: \`${{ steps.validate.outcome }}\`
              #### Terraform Plan: \`${{ steps.plan.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${{ steps.plan.outputs.stdout || 'there is no plan' }}
              \`\`\`

              </details>

              Pushed by: @${{ github.actor }}
              Action: \`${{ github.event_name }}\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: check `terraform plan` status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
